plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}


version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url "https://repo.spongepowered.org/repository/maven-public/" }
	maven { url "https://maven.aliyun.com/repository/public" }
	maven {url 'https://repo.maven.apache.org/maven2/'}
	maven {url 'https://mirrors.tuna.tsinghua.edu.cn/maven/'}
	maven { url 'https://maven.aliyun.com/repository/public' }
	maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
	maven { url 'https://maven.aliyun.com/repository/central' }
	maven { url 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public/' }
	maven { url 'https://repo.sleeping.town' }
	maven { url 'https://maven.fabricmc.net/' }
	maven {
		url "https://lss233.littleservice.cn/repositories/minecraft"
		content {
			includeGroup "com.mojang"
		}
	}
}

loom {

	splitEnvironmentSourceSets()

	mods {
		"noteblock-extension" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	mixin {
		defaultRefmapName = "mixins.noteblock-extension.refmap.json"
		// 添加以下配置解决映射问题
		useLegacyMixinAp = false
	}

	// 为 @Overwrite 添加特殊配置
	runs {
		client {
			property "mixin.debug.export", "true"
			property "mixin.debug.export.decompile", "false"
		}
	}
}


sourceSets {
	client {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}